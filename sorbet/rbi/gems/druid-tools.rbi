# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/druid-tools/all/druid-tools.rbi
#
# druid-tools-2.1.0

module DruidTools
end
class DruidTools::Druid
  def base; end
  def base=(arg0); end
  def base_pathname; end
  def content_dir(create = nil); end
  def druid; end
  def druid=(arg0); end
  def find(type, path); end
  def find_content(path); end
  def find_filelist_parent(type, filelist); end
  def find_metadata(path); end
  def find_temp(path); end
  def id; end
  def initialize(druid, base = nil, strict = nil); end
  def metadata_dir(create = nil); end
  def mkdir(extra = nil); end
  def mkdir_with_final_link(*args, &block); end
  def path(extra = nil, create = nil); end
  def pathname; end
  def prune!(*args, &block); end
  def prune_ancestors(*args, &block); end
  def rmdir(*args, &block); end
  def self.glob; end
  def self.pattern(strict = nil); end
  def self.prefix; end
  def self.prefix=(arg0); end
  def self.strict_glob; end
  def self.valid?(druid, strict = nil); end
  def temp_dir(create = nil); end
  def tree; end
  extend Deprecation
end
class DruidTools::AccessDruid < DruidTools::Druid
  def path(extra = nil, create = nil); end
  def tree; end
end
class DruidTools::SameContentExistsError < RuntimeError
end
class DruidTools::DifferentContentExistsError < RuntimeError
end
class DruidTools::InvalidDruidError < RuntimeError
end
